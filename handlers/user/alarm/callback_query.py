from aiogram import types
from aiogram.fsm.context import FSMContext
from ....misc.utils.cities import get_cities
from ....database.classes.customer import Customer
from ....database.classes.guards import Guards
from ....misc.utils.alarm import *
from .state import AlarmState
from bot.misc.bot import bot
from ....keyboards.inline import account_markup
from aiogram import F
from aiogram import Router
from bot.filters.in_black_list import InBlacklist
from bot.filters.user_exist import UserExistFilter
from bot.filters.is_alarm import AlarmFilter
from ....keyboards.inline import close_alarm

alarm_router_callbacks = Router()


@alarm_router_callbacks.callback_query(F.data == 'alarm', InBlacklist(in_blacklist = False), UserExistFilter(user_exist = True))
async def alarm_handler(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AlarmState.amount_of_guards)
    await query.message.reply('–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–¢—Ä–∏–≤–æ–≥–∞\". –í–∞—à—ñ –¥–∞–Ω—ñ —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ —á–∞—Ç—É (–æ–±—Ä–∞–Ω–µ –∫–ª—ñ—î–Ω—Ç–æ–º –º—ñ—Å—Ç–æ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ, –∞–±–æ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó), –≤–∫–∞–∂—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤ –Ω–∞ –≤–∏–∫–ª–∏–∫ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1 –æ—Ö–æ—Ä–æ–Ω–µ—Ü—å):')


@alarm_router_callbacks.callback_query(AlarmState.explain_reason)
async def explain_reason_of_alarm_handler(query: types.CallbackQuery, state: FSMContext):
    reason = query.data
    await state.update_data({'reason_of_alarm': reason})
    await state.set_state(AlarmState.get_user_location)
    await query.message.reply('–¢–µ–ø–µ—Ä —Å–∫–∏–Ω—å—Ç–µ –ª–æ–∫–∞—Ü—ñ—é, –∫—É–¥–∏ –≤–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç–µ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤:')


@alarm_router_callbacks.callback_query(F.data == 'take_alarm', InBlacklist(in_blacklist = False))
async def take_alarm_handler(query: types.CallbackQuery):
        message_id = query.message.message_id
        user_id = query.from_user.id
    
    # if await Guards.check_user_exists(user_id) and not get_from_accepted_alarms(user_id):
        add_guard_to_alarm(message_id, user_id)
        add_to_accepted_alarms(user_id, query.message.message_id)
        current_guards = get_alarm_guards(message_id)
        max_guards = get_max_alarm_guards(message_id)
        
        await query.message.edit_reply_markup(
            types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = f"–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫ {len(current_guards)}/{max_guards}", callback_data = "take_alarm"),
                ]
            ]
        ))
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = f'–í—ñ–¥–º—ñ–Ω–∞ –≤–∏–∫–ª–∏–∫—É', callback_data = 'cancle_alarm_task'),
                types.InlineKeyboardButton(text = f'–ü—Ä–∏–±—É–≤ –Ω–∞ –≤–∏–∫–ª–∏–∫', callback_data = 'arrived_on_alarm'),
            ]
        ])
    
        customer = await Customer.get(int(get_alarm_customer(message_id)))
        guard = await Guards.get(user_id)
        customer_chat_id = get_alarm_customer(message_id)
  
        if len(current_guards) >= max_guards:
            set_alarm_status(message_id, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤ –Ω–∞–±—Ä–∞–Ω–∞")
            await query.message.delete_reply_markup()
        
        info_message: types.Message = await bot.send_message(chat_id = user_id, text =  
            f'–ü—Ä–∏ –ø—Ä–∏–±—É—Ç—Ç—ñ –Ω–∞ –º—ñ—Å—Ü–µ –≤–∏–∫–ª–∏–∫—É\
            –Ω–∞–∂–º—ñ—Ç—å \"–ü—Ä–∏–±—É–≤ –Ω–∞ –≤–∏–∫–ª–∏–∫\"(\"–í—ñ–¥–º—ñ–Ω–∞ –≤–∏–∫–ª–∏–∫—É\" —Å—Ç–∞—î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é).\
            –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –Ω–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–∫–ª–∏–∫\".\n\n            \
            –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:\n \
            \n<b>–ü–Ü–ë: {customer["fullname"]}</b>\
            \n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {customer["phone"]}</b>',
            reply_markup = keyboard_markup)
        await info_message.reply_photo(photo = customer["photo"], caption = '–§–æ—Ç–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞:')

        alarm_reason = get_alarm_reason(message_id)
        await bot.send_message(chat_id = user_id, text = get_alarm_notation(alarm_reason))
        
        info_message = await bot.send_message(chat_id = customer_chat_id, text = 
            f'–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ—Ö–æ—Ä–æ–Ω—Ü—è:\n\
            \n<b>–ü–Ü–ë: {guard["fullname"]}</b>\
            \n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {guard["phone"]}</b>\
            \n<b>–ú—ñ—Å—Ç–æ: {guard["city"]}</b>\
            \n<b>–û–ø–∏—Å: {guard["description"]}</b>'
        )
        await info_message.reply_photo(photo = guard["photo"], caption = '–§–æ—Ç–æ –æ—Ö–æ—Ä–æ–Ω—Ü—è:')


@alarm_router_callbacks.callback_query(F.data.in_({'cancle_alarm_task', 'arrived_on_alarm', 'finish_alarm'}), InBlacklist(in_blacklist = False), UserExistFilter(user_exist = True))
async def guard_alarm_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    alarm_id = get_from_accepted_alarms(user_id)
    customer_id = int(get_alarm_customer(alarm_id))
    max_active_guards = get_max_alarm_guards(alarm_id)
    active_guards = get_count_of_active_guards(alarm_id)
    
    if is_alarm_exists(alarm_id):
        if query.data == 'arrived_on_alarm':
            update_count_of_arrived_guards(alarm_id)

            keyboard_markup = query.message.reply_markup
            query.message.reply_markup.inline_keyboard[0].clear()
            keyboard_markup.inline_keyboard[0].append(types.InlineKeyboardButton(text = f'–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–∫–ª–∏–∫', callback_data = 'finish_alarm'))
            
            await query.message.edit_reply_markup(keyboard_markup)
            await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—î –ø—Ä–∏–±—É—Ç—Ç—è üëçüèª.')

            guards_arrived_on_alarm = get_count_of_arrived_guards(alarm_id)
            if guards_arrived_on_alarm == max_active_guards:
                set_alarm_status(alarm_id, "–í—Å—ñ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–±—É—Ç—Ç—è")
                await bot.send_message(customer_id, '–í—Å—ñ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ –ø—Ä–∏–±—É–ª–∏ –Ω–∞ –º—ñ—Å—Ü–µ –≤–∏–∫–ª–∏–∫—É')
            else:
                if active_guards == max_active_guards:
                    set_alarm_status(alarm_id, f'{guards_arrived_on_alarm} –∑ {max_active_guards} –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤ –ø—Ä–∏–±—É–ª–∏ –Ω–∞ –≤–∏–∫–ª–∏–∫')
                await bot.send_message(customer_id, '–û–¥–∏–Ω —ñ–∑ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤ –ø—Ä–∏–±—É–≤ –Ω–∞ –º—ñ—Å—Ü–µ –≤–∏–∫–ª–∏–∫—É')


        elif query.data == 'finish_alarm' or query.data == 'cancle_alarm_task':
            await query.message.delete()
            await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫–ª–∏–∫ üëçüèª.')
            await query.message.answer('–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:', reply_markup = await account_markup(user_id))
            remove_from_accepted_alarms(user_id)

            if active_guards == 0:
                set_alarm_status(alarm_id, "–í–∏–∫–ª–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ö–æ—Ä–æ–Ω—Ü—è–º–∏")
                await bot.send_message(chat_id = customer_id, text = '–í–∏–∫–ª–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ö–æ—Ä–æ–Ω—Ü—è–º–∏ üëçüèª.')
                await close_alarm(customer_id)
            else:
                await bot.send_message(chat_id = customer_id, text = '–û–¥–∏–Ω —ñ–∑ –æ—Ö–æ—Ä–Ω—Ü—ñ–≤ –∑–∞–≤–µ—Ä—à–∏–≤ –≤–∞—à –≤–∏–∫–ª–∏–∫.')
    else:
        await query.message.reply('–¶—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –Ω–µ —ñ—Å–Ω—É—î.')
        await query.message.delete() 
        

@alarm_router_callbacks.callback_query(F.data == 'customer_cancle_alarm', InBlacklist(in_blacklist = False), UserExistFilter(user_exist = True))
async def customer_cancle_alarm_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    customer = await Customer.get(user_id)
    
    chat_id = get_cities()[customer['city']]
    alarm_id = get_alarm_by_customer_id(user_id)
    guards = get_alarm_guards(alarm_id)
    await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫–ª–∏–∫ –æ—Ö–æ—Ä–æ–Ω–∏ üëçüèª.')   
    await close_alarm(user_id)
    
    await bot.edit_message_reply_markup(chat_id = chat_id, message_id = alarm_id, reply_markup = None)
    for guard in guards:
        await bot.send_message(chat_id = guard, text = '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫–æ–º')
    
    await query.message.delete()
    await query.message.answer('–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:', reply_markup = await account_markup(user_id))



