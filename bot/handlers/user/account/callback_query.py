from aiogram import types
from aiogram import Router
from aiogram import F
from aiogram.fsm.context import FSMContext
from bot.filters.user_exist import UserExistFilter
from bot.misc.bot import bot
from ....keyboards.inline import account_markup, get_cities_markup
from ....database.classes.customer import Customer
from ....database.classes.guards import Guards
from .state import AccountEdits
from bot.misc.utils.cities import get_cities

account_router_callbacks = Router()


@account_router_callbacks.callback_query(F.data.in_({'edit_account', 'delete_account'}), UserExistFilter(user_exist = True))
async def user_account_options(query: types.CallbackQuery):
    answer_data = query.data
    user_id = query.from_user.id
    user = await Customer.get(user_id) or await Guards.get(user_id)

    if answer_data == 'edit_account':
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–ü–Ü–ë", callback_data = "edit_fullname"),
                    types.InlineKeyboardButton(text = "–ú—ñ—Å—Ç–æ", callback_data = "edit_city"),
                    types.InlineKeyboardButton(text = "–§–æ—Ç–æ", callback_data = "edit_photo"),
                ]
            ]
        )
        
        if await Guards.check_user_exists(user_id):
            keyboard_markup.inline_keyboard[0].append(types.InlineKeyboardButton(text = "–û–ø–∏—Å", callback_data = "edit_description"))
        

        guard_description = f'\n–û–ø–∏—Å: {user["description"]}' if user.get('description') else ''
        user_data = f'\n–ü–Ü–ë: {user["fullname"]}' + f'\n–ú—ñ—Å—Ç–æ: {user["city"]}' + f'\n–¢–µ–ª–µ—Ñ–æ–Ω: {user["phone"]}' + guard_description
        user_photo = user["photo"]

        await query.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ —Ö–æ—á–∏—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:' + user_data, reply_markup = keyboard_markup)
        await query.message.reply_photo(user_photo, '–í–∞—à–µ —Ñ–æ—Ç–æ')

    elif answer_data == 'delete_account':
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–í–∏–¥–∞–ª–∏—Ç–∏", callback_data = "accept_account_deleting"),
                    types.InlineKeyboardButton(text = "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data = "cancle_account_deleting")
                ]
            ]
        )
        await query.message.answer(f"–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç, —É—Å—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ", reply_markup = keyboard_markup)
    

@account_router_callbacks.callback_query(F.data.in_({'edit_fullname', 'edit_city', 'edit_description', 'edit_photo'}), UserExistFilter(user_exist = True))
async def edit_account_options(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()
    answer_data = query.data
    user_id = query.from_user.id
 
    if answer_data == 'edit_fullname':
        await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ü–Ü–ë:")
        await state.set_state(AccountEdits.fullname)
        
    elif answer_data == 'edit_city':
        current_city = None
    
        if await Guards.check_user_exists(user_id):
            current_city = await Guards.get(user_id)
        elif await Customer.check_user_exists(user_id):
            current_city = await Customer.get(user_id)

        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–¢–∞–∫", callback_data = "accept_city_changing"),
                    types.InlineKeyboardButton(text = "–ù—ñ", callback_data = "cancle_city_changing")
                ]
            ]
        )
        await query.message.answer(f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ? –í–∞—à–µ –º—ñ—Å—Ç–æ: {current_city['city']}", reply_markup = keyboard_markup)

    elif answer_data == 'edit_photo':
        await state.set_state(AccountEdits.photo)
        await query.message.answer("–°–∫–∏–Ω—å—Ç–µ –Ω–æ–≤–µ —Ñ–æ—Ç–æ:")

    elif answer_data == 'edit_description':
        await state.set_state(AccountEdits.description)
        await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å:")


@account_router_callbacks.callback_query(AccountEdits.city, F.data.in_(get_cities()), UserExistFilter(user_exist = True))
async def change_user_city_handler(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    await query.message.delete()
    await state.clear()
    
    city_id = None
    
    if await Guards.check_user_exists(user_id):
        guard = await Guards.get(user_id)
        city_id = get_cities()[guard['city']]
        await Guards.set_city(user_id, query.data)

        if await bot.get_chat_member(city_id, user_id):
            await bot.kick_chat_member(city_id, user_id)
    
    elif await Customer.check_user_exists(user_id):
        customer = await Customer.get(user_id)
        city_id = get_cities()[customer['city']]
        await Customer.set_city(user_id, query.data) 
    
        city_id = get_cities()[query.data]
        invite_invite = await bot.create_chat_invite_link(city_id)
        await query.message.answer('–¢–µ–ø–µ—Ä –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–π—Ç–∏ –≤ –≥—Ä—É–ø—É –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤, —â–æ–± –≤—ñ–¥—Å—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', 
            reply_markup = types.InlineKeyboardMarkup(inline_keyboard = [[
                types.InlineKeyboardButton(text = "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", url = invite_invite.invite_link)
            ]
        ]   
    ))
    await query.message.answer("–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–µ üëçüèª.")
    await query.message.answer("–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç: ", reply_markup = await account_markup(user_id))


@account_router_callbacks.callback_query(F.data.in_({"accept_city_changing", "cancle_city_changing"}), UserExistFilter(user_exist = True))
async def comfirm_city_change(query: types.CallbackQuery, state: FSMContext):
    answer_data = query.data
    user_id = query.from_user.id
    
    
    if answer_data == 'accept_city_changing':
        await state.set_state(AccountEdits.city)
        keyboard_markup = get_cities_markup()
        await query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ –º—ñ—Å—Ç–æ —ñ–∑ —Å–ø–∏—Å–∫—É:", reply_markup = keyboard_markup)
        await query.message.delete()

    elif answer_data == 'cancle_city_changing':
        await query.message.edit_text('–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:', reply_markup = await account_markup(user_id))


@account_router_callbacks.callback_query(F.data.in_({"cancle_account_deleting", "accept_account_deleting"}), UserExistFilter(user_exist = True))
async def comfirm_account_delate(query: types.CallbackQuery, state: FSMContext):
    answer_data = query.data
    user_id = query.from_user.id

    await state.clear()
    await query.message.delete()

    if not await Customer.check_user_exists(user_id) and not await Guards.check_user_exists(user_id):
        await query.message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
    else:
        if answer_data == 'accept_account_deleting':
            if await Customer.check_user_exists(user_id):
                await Customer.delete(user_id)
            elif await Guards.check_user_exists(user_id):
                await Guards.delete(user_id)

            await query.message.answer('–í–∞—à –∞–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ üëçüèª.')
            keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–ö–ª—ñ—î–Ω—Ç", callback_data = "customer"),
                    types.InlineKeyboardButton(text = "–û—Ö–æ—Ä–æ–Ω–µ—Ü—å", callback_data = "guard") 
                ]
            ])
            
            await query.message.answer("–í–∞—Å –≤—ñ—Ç–∞—î <b>Guard bot</b>.–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º—ñ —è–∫:", reply_markup = keyboard_markup)
        
        elif answer_data == 'cancle_account_deleting':
            await query.message.edit_text('–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:', reply_markup = await account_markup(user_id))